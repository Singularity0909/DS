<template>
  <!-- template里只能有一个根节点 -->
  <div class = "home-page">
    <swiper class = "swiper" indicator = "true" autoplay = "true" interval = "5000">
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-1.jpg"></image>
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-2.jpg"></image>
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-3.jpg"></image>
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-4.jpg"></image>
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-5.jpg"></image>
    </swiper>
    <input class = "btn" type = "button" value = "扫描二维码" onclick = "scan">
    <input class = "btn" type = "button" value = "刷新队列状态" onclick = "refresh">
    <text class="status">{{QueueStatus}}</text>
  </div>
</template>

<style>
  .title {
    font-size: 40px;
    text-align: center;
  }

  .home-page {
    align-items: center;
    flex-direction: column;
  }

  .swiper {
    height: 420px;
  }

  .btn {
    width: 500px;
    height: 100px;
    margin-top: 100px;
    border-radius: 45px;
    background-color: #15aabf;
    font-size: 30px;
    color: #ffffff;
  }

  .status {
    margin-top: 200px;
    font-size: 40px;
    line-height: 60px;
  }
</style>

<script>
  import router from '@system.router'
  import prompt from '@system.prompt'
  import barcode from '@system.barcode'
  import device from '@system.device'
  import fetch from '@system.fetch'
  import vibrator from '@system.vibrator'

  export default {
    private: {
      title: 'Singularity',
      url: '',
      id: '',
      QueueStatus: ''
    },
    onInit() {
      const self = this
      device.getUserId({
        success: (data) => {
          self.id = data.userId
          vibrator.vibrate({
            mode: 'short'
          })
          prompt.showToast({
            message: '设备标识码获取成功'
          })
        },
        fail: (data, code) => {
          vibrator.vibrate({
            mode: 'short'
          })
          prompt.showToast({
            message: '设备标识码获取失败，请检查权限'
          })
        }
      })
    },
    refresh() {
      const self = this
      fetch.fetch({
        url: self.url,
        data: {"id": self.id},
        method: 'GET',
        responseType: 'text',
        success: (response) => {
          self.QueueStatus = response.data
        },
        fail: (data, code) => {
          self.QueueStatus = '扫码以获取队列状态'
        }
      })
    },
    scan() {
      const self = this
      barcode.scan({
        success: (data) => {
          self.url = data.result
          fetch.fetch({
            url: self.url,
            header: {"id": self.id},
            method: 'POST',
            responseType: 'text',
            success: (response) => {
              vibrator.vibrate({
                mode: 'short'
              })
              prompt.showToast({
                message: response.data
              })
            },
            fail: (data, code) => {
              vibrator.vibrate({
                mode: 'short'
              })
              prompt.showToast({
                message: '加入队列失败，请检查网络或联系开发者'
              })
            }
          })
        },
        fail: (data, code) => {
          vibrator.vibrate({
            mode: 'short'
          })
          prompt.showToast({
            message: '扫码组件初始化失败，请检查权限'
          })
        }
      })
    },
    onMenuPress() {
      this.$app.showMenu()
    }
  }
</script>
