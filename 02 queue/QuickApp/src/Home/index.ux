<template>
  <!-- template里只能有一个根节点 -->
  <div class = "home-page">
    <swiper class = "swiper" indicator = "true" autoplay = "true" interval = "5000">
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-1.jpg"></image>
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-2.jpg"></image>
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-3.jpg"></image>
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-4.jpg"></image>
      <image class = "swiper-item" src = "https://cdn.jsdelivr.net/gh/singularity0909/cdn/img/gallery/amazing-landscape-5.jpg"></image>
    </swiper>
    <text class = "status">{{queueStatus}}</text>
    <input class = "btn" type = "button" value = "扫描二维码" onclick = "scan"></input>
  </div>
</template>

<style>
  .home-page {
    align-items: center;
    flex-direction: column;
  }

  .swiper {
    height: 420px;
  }

  .status {
    height: 400px;
    text-align: center;
    margin-top: 200px;
    font-size: 40px;
    line-height: 80px;
  }

  .btn {
    width: 500px;
    height: 100px;
    margin-top: 100px;
    border-radius: 45px;
    background-color: #15aabf;
    font-size: 30px;
    color: #ffffff;
  }
</style>

<script>
  import router from '@system.router'
  import prompt from '@system.prompt'
  import barcode from '@system.barcode'
  import device from '@system.device'
  import fetch from '@system.fetch'
  import vibrator from '@system.vibrator'

  export default {
    private: {
      url: '',
      id: '',
      size: 0,
      pos: 0,
      itv: 0,
      ntf: 0,
      queueStatus: '扫码以获取队列状态'
    },
    onInit() {
      const self = this
      device.getUserId({
        success: (data) => {
          self.id = data.userId
          vibrator.vibrate({
            mode: 'short'
          })
          prompt.showToast({
            message: '设备标识码获取成功'
          })
        },
        fail: (data, code) => {
          vibrator.vibrate({
            mode: 'short'
          })
          prompt.showToast({
            message: '设备标识码获取失败 请检查权限'
          })
        }
      }),
      // 线程持续刷新队列状态
      setInterval(() => {
        fetch.fetch({
          url: self.url,
          data: {"id": self.id},
          method: 'GET',
          responseType: 'json',
          success: (response) => {
            self.size = response.data['size']
            self.pos = response.data['pos']
            self.itv = response.data['itv']
            self.queueStatus = '当前队列中共有 ' + String(self.size) + ' 人\n'
            if (self.pos == 0) {
              self.queueStatus += '您不在队列中 等待扫码'
              self.ntf = 0
            }
            else {
              self.queueStatus += '您在队列中的位置为 ' + String(self.pos)
              if (self.pos == 1) {
                if (self.ntf == 0) {
                  self.ntf = 1
                  vibrator.vibrate({
                    mode: 'long'
                  })
                  prompt.showToast({
                    message: '您是队首 ' + String(self.itv) + '秒内将自动出队',
                    duration: 1
                  })
                }
              }
            }
          },
          fail: (data, code) => {
            if (self.url != '') {
              self.queueStatus = '队列状态获取失败 请检查网络'
            }
          }
        })
      }, 500)
    },
    scan() {
      const self = this
      barcode.scan({
        success: (data) => {
          self.url = data.result
          // 申请加入队列
          fetch.fetch({
            url: self.url,
            header: {"id": self.id},
            method: 'POST',
            responseType: 'text',
            success: (response) => {
              vibrator.vibrate({
                mode: 'short'
              })
              prompt.showToast({
                message: response.data
              })
            },
            fail: (data, code) => {
              vibrator.vibrate({
                mode: 'short'
              })
              prompt.showToast({
                message: '队列状态获取失败 请检查网络'
              })
            }
          })
        },
        fail: (data, code) => {
          vibrator.vibrate({
            mode: 'short'
          })
          prompt.showToast({
            message: '扫码组件初始化失败 请检查权限'
          })
        }
      })
    },
    onMenuPress() {
      this.$app.showMenu()
    }
  }
</script>
